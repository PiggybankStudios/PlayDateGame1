{
	"folders":
	[
		{
			"path": ".",
			"folder_exclude_patterns":
			[
				"build",
				"lib",
				".vs",
				"Debug",
				"engine",
			],
		},
		{
			"name": "PigEngine",
			"path": "engine/platform/playdate",
		},
		{
			"name": "GyLib",
			"path": "lib/include/gylib",
		},
		{
			"path": "build",
			"folder_exclude_patterns":
			[
				".vs",
				"*.pdx",
			],
			"file_exclude_patterns":
			[
				"*.exp",
				"*.map",
				"*.obj",
				"*.ilk",
				"*.manifest",
				"preprocessed_output.txt",
			],
		},
		{
			"path": "C:\\Users\\robbitay\\Documents\\MyStuff\\Programs\\PlaydateSDK",
			"folder_exclude_patterns":
			[
				".sentry-native",
				"bin",
				"Designing for Playdate",
				"Disk",
				"Inside Playdate",
				"PlaydateSDK.docset",
				"resources",
				"C_API/buildsupport",
				"CoreLibs/assets",
			],
			"file_exclude_patterns":
			[
				"*.html",
				"*.css",
			],
		},
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[
			"AllocAlignment_16Bytes",
			"AllocAlignment_4Bytes",
			"AllocAlignment_64Bytes",
			"AllocAlignment_8Bytes",
			"AllocAlignment_Max",
			"AllocAlignment_None",
			"AppStateChangeType_Change",
			"AppStateChangeType_None",
			"AppStateChangeType_NumTypes",
			"AppStateChangeType_Pop",
			"AppStateChangeType_Push",
			"AppState_Game",
			"AppState_MainMenu",
			"AppState_None",
			"AppState_NumStates",
			"Btn_A",
			"Btn_B",
			"Btn_CrankCcw",
			"Btn_CrankCw",
			"Btn_CrankDock",
			"Btn_Down",
			"Btn_Left",
			"Btn_None",
			"Btn_NumButtons",
			"Btn_Right",
			"Btn_Up",
			"CRANK_BTN_DEADZONE",
			"CRANK_DELTA_DEADZONE",
			"DEBUG_FONT_PATH",
			"DbgLevel_Debug",
			"DbgLevel_Error",
			"DbgLevel_Info",
			"DbgLevel_None",
			"DbgLevel_Notify",
			"DbgLevel_NumLevels",
			"DbgLevel_Other",
			"DbgLevel_Regular",
			"DbgLevel_Warning",
			"FIRST_APP_STATE",
			"FIXED_HEAP_SIZE",
			"FONT_RANGE_CHARS_WIDTH",
			"FontRange_AsciiSyntax",
			"FontRange_Hiragana",
			"FontRange_HiraganaMarked",
			"FontRange_HiraganaSmall",
			"FontRange_Katakana",
			"FontRange_KatakanaMarked",
			"FontRange_KatakanaSmall",
			"FontRange_Lowercase",
			"FontRange_None",
			"FontRange_NumRanges",
			"FontRange_Numbers",
			"FontRange_Punctuation",
			"FontRange_Space",
			"FontRange_Uppercase",
			"FontRanges_ASCII",
			"FontRanges_All",
			"FontRanges_Alphabet",
			"FontRanges_English",
			"FontRanges_Japanese",
			"GAME_FONT_PATH",
			"GAME_RETURN_TO_MENU_HOLD_B_TIME",
			"GAME_VERSION_BUILD",
			"GAME_VERSION_MAJOR",
			"GAME_VERSION_MINOR",
			"GYLIB_MEM_ARENA_DEBUG_ENABLED",
			"GY_CUSTOM_STD_LIB",
			"GY_WASM_STD_LIB",
			"LINUX_COMPILATION",
			"MAIN_FONT_PATH",
			"MAIN_HEAP_MAX_NUM_PAGES",
			"MAIN_HEAP_PAGE_SIZE",
			"MAX_NUM_APP_STATE_CHANGE_REQUESTS",
			"MAX_SOUND_INSTANCES",
			"MemArenaType_Alias",
			"MemArenaType_Buffer",
			"MemArenaType_FixedHeap",
			"MemArenaType_MarkedStack",
			"MemArenaType_None",
			"MemArenaType_PagedHeap",
			"MemArenaType_PagedStack",
			"MemArenaType_Redirect",
			"MemArenaType_StdHeap",
			"MemArenaType_VirtualStack",
			"MyStr_Empty",
			"MyStr_Empty_Const",
			"OSX_COMPILATION",
			"PERF_GRAPH_DISPLAY_HEIGHT",
			"PERF_GRAPH_FONT_PATH",
			"PERF_GRAPH_WIDTH",
			"PERF_TICK_WIDTH",
			"PIG_VERSION_BUILD",
			"PIG_VERSION_MAJOR",
			"PIG_VERSION_MINOR",
			"PLAYDATE_COMPILATION",
			"SCRATCH_ARENA_MAX_NUM_MARKS",
			"SCRATCH_ARENA_SIZE",
			"SMALL_FONT_PATH",
			"TARGET_FRAMERATE",
			"TARGET_FRAME_TIME",
			"TIME_SCALE_SNAP_PERCENT",
			"UNKNOWN_CHAR_CODEPOINT",
			"UNKNOWN_CHAR_STR",
			"WASM_COMPILATION",
			"WINDOWS_COMPILATION",
		],
		"custom_functions":
		[
			"#define AllocArray(arena, structName, numItems)",
			"#define AllocBytes(arena, numBytes)",
			"#define AllocChars(arena, numBytes)",
			"#define AllocStruct(arena, structName)",
			"#define ArenaDelete(type, pntr, arena)",
			"#define ArenaNew(type, pntrToAssign, arena, ...)",
			"#define CreateStackBufferArena(arenaName, bufferName, size)",
			"#define FreeBufferArena(bufferArena, sourceArena)",
			"#define GYLIB_DEBUG_OUTPUT_HANDLER_DEF(functionName)",
			"#define GYLIB_DEBUG_PRINT_HANDLER_DEF(functionName)",
			"#define GyLibPrintAt(level, formatString, ...)",
			"#define GyLibPrintLineAt(level, formatString, ...)",
			"#define GyLibPrintLine_D(formatString, ...)",
			"#define GyLibPrintLine_E(formatString, ...)",
			"#define GyLibPrintLine_I(formatString, ...)",
			"#define GyLibPrintLine_N(formatString, ...)",
			"#define GyLibPrintLine_O(formatString, ...)",
			"#define GyLibPrintLine_R(formatString, ...)",
			"#define GyLibPrintLine_W(formatString, ...)",
			"#define GyLibPrint_D(formatString, ...)",
			"#define GyLibPrint_E(formatString, ...)",
			"#define GyLibPrint_I(formatString, ...)",
			"#define GyLibPrint_N(formatString, ...)",
			"#define GyLibPrint_O(formatString, ...)",
			"#define GyLibPrint_R(formatString, ...)",
			"#define GyLibPrint_W(formatString, ...)",
			"#define GyLibWriteAt(level, message)",
			"#define GyLibWriteLineAt(level, message)",
			"#define GyLibWriteLine_D(message)",
			"#define GyLibWriteLine_E(message)",
			"#define GyLibWriteLine_I(message)",
			"#define GyLibWriteLine_N(message)",
			"#define GyLibWriteLine_O(message)",
			"#define GyLibWriteLine_R(message)",
			"#define GyLibWriteLine_W(message)",
			"#define GyLibWrite_D(message)",
			"#define GyLibWrite_E(message)",
			"#define GyLibWrite_I(message)",
			"#define GyLibWrite_N(message)",
			"#define GyLibWrite_O(message)",
			"#define GyLibWrite_R(message)",
			"#define GyLibWrite_W(message)",
			"#define HardFreeMem(arena, allocPntr)",
			"#define HardReallocMem(arena, allocPntr, newSize)",
			"#define InPlaceNew(type, pntrToClass, ...)",
			"#define IsAllocPrefixFilled(packedSize)",
			"#define MyBufferPrintf(buffer, bufferSize, formatStr, ...)",
			"#define MyFree(ptr)",
			"#define MyHostToNetworkByteOrderU32(integer)",
			"#define MyHostToNetworkByteOrderU32(integer)",
			"#define MyMalloc(numBytes)",
			"#define MyMemCompare(ptr1, ptr2, length)",
			"#define MyMemCopy(dest, source, length)",
			"#define MyMemMove(dest, source, length)",
			"#define MyMemSet(dest, value, length)",
			"#define MyNetworkToHostByteOrderU16(integer)",
			"#define MyNetworkToHostByteOrderU32(integer)",
			"#define MyRealloc(ptr, numBytes)",
			"#define MyStrCompare(str1, str2, length)",
			"#define MyStrCompareNt(str1, str2)",
			"#define MyStrCopyNt(dest, source)",
			"#define MyStrLength(str)",
			"#define MyStrLength32(str)",
			"#define MyStrLength64(str)",
			"#define MyStrStrNt(str1, str2)",
			"#define MyVaListPrintf(buffer, bufferSize, formatStr, vaList)",
			"#define MyWideStrLength(str)",
			"#define MyWideStrLength32(str)",
			"#define PackAllocPrefixSize(used, size)",
			"#define PrintInArenaVa(arena, resultName, resultLengthName, formatString)",
			"#define SoftFreeMem(arena, allocPntr)",
			"#define SoftReallocMem(arena, allocPntr, newSize)",
			"#define UnpackAllocPrefixSize(packedSize)",
			"AppState_t GetCurrentAppState()",
			"AppState_t InitGame()",
			"BitmapData_t GetBitmapData(LCDBitmap* bitmap, bool sizeOnly = false)",
			"FontRange_t FontRangeByIndex(u64 index)",
			"Font_t LoadFont(MyStr_t path)",
			"Font_t* PdBindFont(Font_t* font)",
			"LCDBitmapDrawMode PdSetDrawMode(LCDBitmapDrawMode drawMode)",
			"MemArena_t AllocBufferArena(MemArena_t* sourceArena, u64 numBytes, AllocAlignment_t alignOverride = AllocAlignment_None)",
			"SoundInstance_t NewSoundInstance(Sound_t* source)",
			"SoundInstance_t* AllocSoundInstance()",
			"SoundInstance_t* PlaySound(Sound_t* source, int repeatCount = 1, r32 rate = 1.0f)",
			"Sound_t LoadSound(MyStr_t path)",
			"SpriteSheet_t LoadSpriteSheet(MyStr_t path, i32 numFramesX)",
			"Texture_t LoadTexture(MyStr_t path)",
			"bool APP_STATE_IS_FULL_DEFINITION()",
			"bool BtnChanged(Btn_t btn)",
			"bool BtnChangedRaw(Btn_t btn)",
			"bool BtnDown(Btn_t btn)",
			"bool BtnDownRaw(Btn_t btn)",
			"bool BtnPressed(Btn_t btn)",
			"bool BtnPressedRaw(Btn_t btn)",
			"bool BtnReleased(Btn_t btn)",
			"bool BtnReleasedRaw(Btn_t btn)",
			"bool DoesMemArenaSupportFreeing(MemArena_t* arena)",
			"bool DoesMemArenaSupportPushAndPop(MemArena_t* arena)",
			"bool FontHasRange(Font_t font, u16 range, bool partial = false)",
			"bool FreeMem(MemArena_t* arena, void* allocPntr, u64 allocSize = 0, bool ignoreNullptr = false, u64* oldSizeOut = nullptr)",
			"bool IsAlignedTo(const void* memoryPntr, AllocAlignment_t alignment)",
			"bool IsAppStateActive(AppState_t appState)",
			"bool IsCurrentAppState()",
			"bool IsFullAppState(AppState_t appState)",
			"bool IsInitialized(const MemArena_t* arena)",
			"bool IsPntrInsideRange(const void* testPntr, const void* rangeBase, u64 rangeSize, bool inclusive = false)",
			"bool IsSameCharBitmap(BitmapData_t char1, BitmapData_t char2)",
			"bool MemArenaVerify(MemArena_t* arena, bool assertOnFailure = false)",
			"bool WasBtnHandled(Btn_t btn)",
			"char* AllocCharsAndFill(MemArena_t* arena, u64 numChars, const char* dataForFill, bool addNullTerm = true)",
			"char* AllocCharsAndFillNt(MemArena_t* arena, const char* nullTermStr, bool addNullTerm = true)",
			"char* PrintInArena(MemArena_t* arena, const char* formatString, ...)",
			"const char* GetAppStateChangeTypeStr(AppStateChangeType_t enumValue)",
			"const char* GetAppStateStr(AppState_t enumValue)",
			"const char* GetBtnStr(Btn_t enumValue)",
			"const char* GetDbgLevelStr(DbgLevel_t gyDbgLevel)",
			"const char* GetFontCapsStr(Font_t font)",
			"const char* GetFontRangeStr(FontRange_t range)",
			"const char* GetMemArenaTypeStr(MemArenaType_t arenaType)",
			"const char* GetPDLanguageStr(PDLanguage language)",
			"const char* GetPDSystemEventStr(PDSystemEvent event)",
			"inline Btn_t ToBtn(Dir2_t direction)",
			"inline Dir2_t ToDir2(Btn_t btn)",
			"inline MemArena_t* GetScratchArena(MemArena_t* avoidConflictWith1 = nullptr, MemArena_t* avoidConflictWith2 = nullptr)",
			"inline bool IsCrankDocked()",
			"inline bool IsCrankDockedRaw()",
			"inline bool IsDpadBtn(Btn_t btn)",
			"inline bool IsFaceBtn(Btn_t btn)",
			"inline bool IsLetterBtn(Btn_t btn)",
			"inline bool IsPseudoBtn(Btn_t btn)",
			"inline void FreeScratchArena(MemArena_t* scratchArena)",
			"inline void HandleCrankDocked()",
			"inline void HandleCrankDockedExtended()",
			"int MainUpdateCallback(void* userData)",
			"int PrintVa_Measure(const char* formatString, va_list args)",
			"u32 GetFontRangeChar(FontRange_t range, u64 charIndex)",
			"u64 GetNumMarks(MemArena_t* arena)",
			"u64 GrowMemQuery(MemArena_t* arena, const void* prevAllocPntr, u64 prevAllocSize, GrowMemToken_t* tokenOut = nullptr)",
			"u64 PushMemMark(MemArena_t* arena)",
			"u8 GetFontRangeIndex(FontRange_t range)",
			"u8 GetNumCharsInFontRange(FontRange_t range)",
			"u8 OffsetToAlign(const void* memoryPntr, AllocAlignment_t alignment)",
			"v2i GetBitmapSize(LCDBitmap* bitmap)",
			"v2i MeasureText(PDFont* font, MyStr_t text)",
			"void APP_STATE_RENDER_DEFINITION(bool isOnTop)",
			"void APP_STATE_START_DEFINITION(bool initialize, AppState_t prevState, MyStr_t infoStr)",
			"void APP_STATE_STOP_DEFINITION(bool deinitialize, AppState_t nextState)",
			"void APP_STATE_UPDATE_DEFINITION()",
			"void AppDebugOutput(u8 flags, const char* filePath, u32 lineNumber, const char* funcName, DbgLevel_t level, bool newLine, const char* message)",
			"void AppDebugPrint(u8 flags, const char* filePath, u32 lineNumber, const char* funcName, DbgLevel_t level, bool newLine, const char* formatString, ...)",
			"void ChangeAppState(AppState_t newAppState, MyStr_t transitionStr = MyStr_Empty, bool stayInitialized = false)",
			"void ClearMemArena(MemArena_t* arena)",
			"void ComboMenuItemCallback(void* userData)",
			"void DebugConsoleToggledCallback(void* userData)",
			"void DebugOutput(const char* filePath, u32 lineNumber, const char* funcName, DbgLevel_t level, bool newLine, const char* message)",
			"void FreeMemArena(MemArena_t* arena)",
			"void GameInitialize()",
			"void GameUpdate()",
			"void GrowMem(MemArena_t* arena, const void* prevAllocPntr, u64 prevAllocSize, u64 newAllocSize, const GrowMemToken_t* token)",
			"void HandleBtn(Btn_t btn)",
			"void HandleBtnExtended(Btn_t btn)",
			"void HandleSystemEvent(PDSystemEvent event, uint32_t arg)",
			"void InitMemArena_Alias(MemArena_t* arena, MemArena_t* sourceArena)",
			"void InitMemArena_Buffer(MemArena_t* arena, u64 bufferSize, void* bufferPntr, bool singleAlloc = false, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitMemArena_FixedHeap(MemArena_t* arena, u64 size, void* memoryPntr, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitMemArena_MarkedStack(MemArena_t* arena, u64 size, void* memoryPntr, u64 maxNumMarks, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitMemArena_PagedHeapArena(MemArena_t* arena, u64 pageSize, MemArena_t* sourceArena, u64 maxNumPages = 0, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitMemArena_PagedHeapFuncs(MemArena_t* arena, u64 pageSize, AllocationFunction_f* allocFunc, FreeFunction_f* freeFunc, u64 maxNumPages = 0, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitMemArena_Redirect(MemArena_t* arena, AllocationFunction_f* allocFunc, FreeFunction_f* freeFunc)",
			"void InitMemArena_StdHeap(MemArena_t* arena)",
			"void InitPerfGraph(PerfGraph_t* graph)",
			"void InitScratchArenas(MemArena_t* sourceArena, u64 perArenaSize, u64 maxNumMarks, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitSoundPool(SoundPool_t* pool)",
			"void InitializeAppInput()",
			"void PdBeginFrame()",
			"void PdDrawLine(v2i start, v2i end, i32 width, LCDColor color = kColorBlack)",
			"void PdDrawRec(reci drawRec, LCDColor color = kColorBlack)",
			"void PdDrawRecOutline(reci drawRec, i32 thickness, bool outside = false, LCDColor color = kColorBlack)",
			"void PdDrawSheetFrame(SpriteSheet_t sheet, v2i frame, reci drawRec)",
			"void PdDrawText(MyStr_t text, v2i position)",
			"void PdDrawTextPrint(v2i position, const char* formatString, ...)",
			"void PdDrawTexturedRec(LCDBitmap* bitmap, v2i bitmapSize, reci drawRec)",
			"void PopAppState(MyStr_t transitionStr = MyStr_Empty, bool stayInitialized = false)",
			"void PopMemMark(MemArena_t* arena, u64 mark = 0xFFFFFFFFFFFFFFFFULL)",
			"void PostRenderGame()",
			"void PostUpdateGame()",
			"void PreRenderGame()",
			"void PrintVa_Print(const char* formatString, va_list args, char* allocatedSpace, int previousResult)",
			"void PushAppState(AppState_t newAppState, MyStr_t transitionStr = MyStr_Empty)",
			"void RegisterAppState_Game()",
			"void RegisterAppState_MainMenu()",
			"void RenderAppState(AppState_t appState, bool isOnTop)",
			"void RenderAppStateStack()",
			"void RenderAppState_Game(bool isOnTop)",
			"void RenderAppState_MainMenu(bool isOnTop)",
			"void RenderPerfGraph(PerfGraph_t* graph)",
			"void ShrinkMem(MemArena_t* arena, const void* prevAllocPntr, u64 prevAllocSize, u64 newAllocSize)",
			"void StartAppState(AppState_t appState, bool initialize, AppState_t prevState, MyStr_t transitionStr)",
			"void StartAppState_Game(bool initialize, AppState_t prevState, MyStr_t transitionStr)",
			"void StartAppState_MainMenu(bool initialize, AppState_t prevState, MyStr_t transitionStr)",
			"void StartFirstAppState(AppState_t appState)",
			"void StartSoundInstance(SoundInstance_t* instance, int repeatCount = 1, r32 rate = 1.0f)",
			"void StopAppState(AppState_t appState, bool deinitialize, AppState_t nextState)",
			"void StopAppState_Game(bool deinitialize, AppState_t nextState)",
			"void StopAppState_MainMenu(bool deinitialize, AppState_t nextState)",
			"void UpdateAndRenderAppStateStack()",
			"void UpdateAppInput()",
			"void UpdateAppInputBtnState(BtnState_t* state, bool isDown)",
			"void UpdateAppState(AppState_t appState)",
			"void UpdateAppStateStack()",
			"void UpdateAppState_Game()",
			"void UpdateAppState_MainMenu()",
			"void UpdatePerfGraph(PerfGraph_t* graph)",
			"void UpdateSoundInstance(SoundInstance_t* instance)",
			"void UpdateSoundPool()",
			"void* AllocMem(MemArena_t* arena, u64 numBytes, AllocAlignment_t alignOverride = AllocAlignment_None)",
			"void* ReallocMem(MemArena_t* arena, void* allocPntr, u64 newSize, u64 oldSize = 0, AllocAlignment_t alignOverride = AllocAlignment_None, bool ignoreNullptr = false, u64* oldSizeOut = nullptr)",
			"void* RegisterAppState(AppState_t state, u64 dataSize, AppStateStart_f* StartFunc, AppStateStop_f* StopFunc, AppStateUpdate_f* UpdateFunc, AppStateRender_f* RenderFunc, AppStateIsFull_f* IsFullFunc = nullptr)",
		],
		"custom_globals":
		[
			"ElapsedMs",
			"FontRangeChars",
			"ProgramTime",
			"ScreenSize",
			"ScreenSizef",
			"TimeScale",
			"fixedHeap",
			"game",
			"input",
			"mainHeap",
			"pd",
			"pig",
		],
		"custom_types":
		[
			"AllocAlignment_t",
			"AllocationFunction_f",
			"AppInput_t",
			"AppStateChangeType_t",
			"AppStateChange_t",
			"AppStateInfo_t",
			"AppStateIsFull_f",
			"AppStateRender_f",
			"AppStateStack_t",
			"AppStateStart_f",
			"AppStateStop_f",
			"AppStateUpdate_f",
			"AppState_t",
			"BitmapData_t",
			"BtnState_t",
			"Btn_t",
			"DbgLevel_t",
			"FontRange_t",
			"Font_t",
			"FreeFunction_f",
			"GameGlobals_t",
			"GameState_t",
			"GyLibDebugOutput_f",
			"GyLibDebugPrint_f",
			"HeapAllocPrefix_t",
			"HeapPageHeader_t",
			"MarkedStackArenaHeader_t",
			"MemArenaType_t",
			"MemArena_t",
			"PigEngineState_t",
			"PlaydateAPI",
			"SoundInstance_t",
			"SoundPool_t",
			"Sound_t",
			"SpriteSheet_t",
			"Texture_t",
		],
	},
}
